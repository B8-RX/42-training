!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ssghioua/SANDBOX/42-training/philosophers/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
DEAD	philo/philo.h	/^  DEAD,$/;"	e	enum:__anonfab04d820103
EAT	philo/philo.h	/^  EAT,$/;"	e	enum:__anonfab04d820103
PHILO_H	philo/philo.h	/^# define PHILO_H /;"	d
SLEEP	philo/philo.h	/^  SLEEP$/;"	e	enum:__anonfab04d820103
__anonfab04d820103	philo/philo.h	/^{$/;"	g
create_philo	philo/main.c	/^t_philo	*create_philo(int id, t_params *params) {$/;"	f	typeref:typename:t_philo *
curr_philo	philo/philo.h	/^	t_philo				*curr_philo;$/;"	m	struct:s_philo_list	typeref:typename:t_philo *
dead	philo/philo.h	/^	bool		      	dead;$/;"	m	struct:s_philo	typeref:typename:bool
eat	philo/philo.h	/^	bool  		    	eat;$/;"	m	struct:s_philo	typeref:typename:bool
fork	philo/philo.h	/^  pthread_mutex_t *fork;$/;"	m	struct:s_shared	typeref:typename:pthread_mutex_t *
free_philo_list	philo/main.c	/^void	free_philo_list(t_philo_list *list)$/;"	f	typeref:typename:void
ft_atoi	philo/philo_utils.c	/^int ft_atoi(char *num) {$/;"	f	typeref:typename:int
ft_atoll	philo/philo_utils.c	/^long long	ft_atoll(char *num) {$/;"	f	typeref:typename:long long
ft_strlen	philo/philo_utils.c	/^size_t ft_strlen(char *str) {$/;"	f	typeref:typename:size_t
get_timestamp	philo/main.c	/^unsigned long get_timestamp(void)$/;"	f	typeref:typename:unsigned long
go_die	philo/main.c	/^void  go_die(t_philo *philo)$/;"	f	typeref:typename:void
go_eat	philo/main.c	/^void  go_eat(t_philo *philo)$/;"	f	typeref:typename:void
go_sleep	philo/main.c	/^void  go_sleep(t_philo *philo)$/;"	f	typeref:typename:void
handle_args	philo/philo_utils.c	/^t_params *handle_args(int argc, char **argv)$/;"	f	typeref:typename:t_params *
handle_forks	philo/main.c	/^bool  handle_forks(t_philo  *philo)$/;"	f	typeref:typename:bool
handle_params	philo/main.c	/^void	handle_params(t_params *params, int total_philo, long long time_to_die,$/;"	f	typeref:typename:void
id	philo/philo.h	/^	int			  	    id;$/;"	m	struct:s_philo	typeref:typename:int
init_forks	philo/philo_utils.c	/^void  init_forks(t_params *params, t_shared *shared)$/;"	f	typeref:typename:void
init_philo	philo/philo_utils.c	/^void  init_philo(t_params *params, t_philo_list **philo_list, t_shared *shared)$/;"	f	typeref:typename:void
init_shared	philo/philo_utils.c	/^t_shared  *init_shared(t_params *params)$/;"	f	typeref:typename:t_shared *
is_digits	philo/main.c	/^bool is_digits(char *arg) {$/;"	f	typeref:typename:bool
is_time_over	philo/main.c	/^bool  is_time_over(unsigned long waiting_time, int time_to_die)$/;"	f	typeref:typename:bool
lock_fork	philo/philo_utils.c	/^int lock_fork(pthread_mutex_t *fork)$/;"	f	typeref:typename:int
log_action	philo/main.c	/^void  log_action(const char *action, int philo_id)$/;"	f	typeref:typename:void
main	philo/main.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
next	philo/philo.h	/^	struct s_philo_list	*next;$/;"	m	struct:s_philo_list	typeref:struct:s_philo_list *
params	philo/philo.h	/^  t_params        *params;$/;"	m	struct:s_philo	typeref:typename:t_params *
push_philo	philo/main.c	/^void push_philo(t_philo_list **list, t_philo *philo) {$/;"	f	typeref:typename:void
release_forks	philo/main.c	/^void  release_forks(t_philo *philo)$/;"	f	typeref:typename:void
routine	philo/main.c	/^void  *routine(void *arg)$/;"	f	typeref:typename:void *
s_params	philo/philo.h	/^typedef struct s_params$/;"	s
s_philo	philo/philo.h	/^typedef struct s_philo$/;"	s
s_philo_list	philo/philo.h	/^typedef struct s_philo_list$/;"	s
s_shared	philo/philo.h	/^typedef struct s_shared$/;"	s
served_meals	philo/philo.h	/^  int         served_meals;$/;"	m	struct:s_params	typeref:typename:int
set_state	philo/main.c	/^void  set_state(t_philo *philo, t_state state)$/;"	f	typeref:typename:void
shared	philo/philo.h	/^  t_shared        *shared;$/;"	m	struct:s_philo	typeref:typename:t_shared *
sleep	philo/philo.h	/^	bool	  	    	sleep;$/;"	m	struct:s_philo	typeref:typename:bool
start_routines	philo/main.c	/^void	start_routines(t_philo_list *list)$/;"	f	typeref:typename:void
t_params	philo/philo.h	/^} t_params;$/;"	t	typeref:struct:s_params
t_philo	philo/philo.h	/^} t_philo;$/;"	t	typeref:struct:s_philo
t_philo_list	philo/philo.h	/^} t_philo_list;$/;"	t	typeref:struct:s_philo_list
t_shared	philo/philo.h	/^} t_shared;$/;"	t	typeref:struct:s_shared
t_state	philo/philo.h	/^} t_state;$/;"	t	typeref:enum:__anonfab04d820103
thread	philo/philo.h	/^  pthread_t       thread;$/;"	m	struct:s_philo	typeref:typename:pthread_t
time_to_die	philo/philo.h	/^	long long		time_to_die;$/;"	m	struct:s_params	typeref:typename:long long
time_to_eat	philo/philo.h	/^	long long		time_to_eat;$/;"	m	struct:s_params	typeref:typename:long long
time_to_sleep	philo/philo.h	/^	long long		time_to_sleep;$/;"	m	struct:s_params	typeref:typename:long long
total_meals	philo/philo.h	/^	int				  total_meals;$/;"	m	struct:s_params	typeref:typename:int
total_philo	philo/philo.h	/^	int				  total_philo;$/;"	m	struct:s_params	typeref:typename:int
unlock_fork	philo/philo_utils.c	/^int unlock_fork(pthread_mutex_t *fork)$/;"	f	typeref:typename:int
